@model Domain.Core.Models.Order


    
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
        
    <div class="form-horizontal">
        <h4>Order</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    
        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>
    
        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.Hidden("ShoppingCartId", (object)ViewBag.ShoppingCartId)
        @Html.Hidden("Amount", (object)ViewBag.TotalAmount)

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Confirm order" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    Your order consists of @ViewBag.ShoppingListItemsCount items, total amount equals @ViewBag.TotalAmount
</div>